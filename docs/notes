Yevgeniya
=========

This file contains notes for 'yevgeniya', a successor to nomad.

The language is a testbed for various ideas I've had over the years.
I would see if it's possible to make a language with an interpreter and
compiler that would help catch the errors I make - or even eliminate
some of them altogether.  It would be interesting to work out what the
trade-offs are.

Some of the ideas I'd like to experiment with include:

1. use of uninitialized variables (read with no prev write, or uninit read)
2. dead writes (writes with no intervening reads)
3. terminal writes (writes to loc var with no subsequent read)
4. no global variables
5. partial IF/CASEs (non-exhaustive conditions)
6. overlapping IF/CASEs.
6. problems with dynamic memory allocation
   (read before alloc, read after alloc but 
   before init, read after free, double free)

characteristics of the language.

* like Pascal, the language is imperative.
* like Pascal, the language is case-insensitive (except for strings).
* there should be a simple way to connect to C bindings.
* syntax influenced by Pascal and PL/0.
* separate compilation (PROGRAM and UNIT subprograms).
* all elements defined in a UNIT are exported.  a client 
  program or unit imports the contents of UNIT with a USE 
  statement.  the access to contents of an imported UNIT are 
  fully qualified, and there is no way to get unqualified 
  import.
* there are no comments in the language.  comment-like 
  features are achieved via a literate programming tool 
  like cobweb or a notebook environment like jupyter.
* program files are encoded in UTF8.
* there should be a standard program formatter (like gofmt).
* there are no global variables.
* there are no nested procedure definitions.
* PROCEDUREs and FUNCTIONs.  although there are no tuple types, a 
  function may return multiple results.
* procedures have in-only or in-out parameters.  functions have 
  in-only and out-only parameters.
* out-only function parameters must be allocated in the caller.
	(think about how this would work.  can I do writeln(sqrt(2.0)) ? 
	here the caller has to allocate a temporary.)
* parameter passing modes are constant, reference (VAR) and result.
* types are basic (BOOLEAN, BYTE, INTEGER, REAL), compound 
  (ARRAY, RECORD), and other types (FILE, pointers, subranges, 
  and user-defined types).
* procedures and functions may be passed as arguments, but not returned as 
  results.  there are no procedure or function literals.
* array references are always bounds-checked.
* IF-ELIF construct and CASE construct are total - one 
  branch must succeed.  every run implies evaluation of all 
  branches.  if there are multiple true branches, a true 
  branch is chosen with the aid of a simple pseudorandom 
  number generator.  if there is no true branch, the program 
  halts with a diagnostic message.
* in an assignment, the order of evaluation of r.h.s. 
  expressions cannot change the value produced for the 
  l.h.s. assignment target.
* a pointer value that is "before" its initial association 
  (NEW) or "after" a DISPOSE, is in an uninitialized state.
* there are no exceptions in the language.  a fatal error 
  causes the program to halt with appropriate diagnostics.

Types in the language
---------------------

basic types ::

 INTEGER, REAL, BYTE, BOOLEAN.

 An INTEGER is a element of a subrange MIN_INTEGER .. MAX_INTEGER, 
 where these are implementation-defined (16, 32, or 64 bit).
 The initial test implementation will use int16 for INTEGER.

 a REAL is either a float32 or float64, depending on sizeof INTEGER.
 for 16-bit and 32-bit ints, REAL is float32, for 64-bit ints real 
 is float64.

 a BYTE is conceptually an INTEGER subrange with values 0...255, 
 but implemented as a uint8.

 a BOOLEAN is implemented as a uint8 with values 0 (false) and 1 (true).

miscellaneous types ::

	subranges: e.g. 0..255.
	pointers: e.g. ^T.
	files: FILE of T.

compound types (containing multiple values) - arrays, records, tables :: 

	ARRAY N OF T. 
	STRING is just ARRAY OF BYTE.
	RECORD field (";" field)* END.

	arrays and records can be assigned to or compared with 
	conformal display literals:

	type
		rt = record(x:integer; b:boolean);
	var 
		a: array 3 of integer;
		r: rt;
	begin
		a := (1,2,3);
		r = (12, true);
	...


A non-var formal parameter of pointer type cannot appear 
inside its procedure as the target of an assignment, more 
generally this constraints applies to any non-var formal 
parameter.

The language does not provide a way to declare a variable 
in an initialized state.  For all compound type, there is a 
way to initialize the variable at runtime with a display literal: ::

 array:   a := (1,2,3) ;   (number of elements must equal size of array)
 record:  r := (1, 2.0); 

These multi-element literals in assignments are just 
syntactic sugar for a sequence of assignments performed
left to right that perform the equivalent initialization, .

The interpreter should collect information to help detect the following 
conditions:

1. the use of an uninitialized variable. (read with no 
   previous write in a single scope.) (uninit read)
2. dead assignments. (write x followed by write x in a 
   single scope with no intervening read.)  (dead write)
3. write with no subsequent read for a non-returned local 
   variable or VAR parameter. (terminal write).

consider finding the max value in an array. ::

	max := 0;
	for i := 0 to len(A)-1 do 
		alt
			a[i] > max => max = a[i]
		|	a[i] <= max => skip; 

It appears that for each variable, there is a pattern of 
write-read in use.  If we represent a write operation 
as 'w' and a read as 'r', the succession of access for 
a given variable should match one of the
following regular expressions. ::

 constants and constant parameters:	r+
 local variables: 			(wr+)+
 VAR parameter (used in-out):		(r+w)+r*
 VAR parameter (used in): 		r+
 VAR parameter (used out): 		w

 there may be a case where a read-write pattern of (wr)+
 makes sense.  this would be a variable whose writes and reads
 strictly alternate.

thoughts about maps
-------------------

Golang uses the name 'maps' to refer to associative arrays.
It would be convenient to provide a standard associative array 
in the language.  In Yevgenia, these are called 'tables'.

A table is a dynamically resizeable associative array.  It is 
provided by an abstract unit 'table' with some default procedures. ::

	SIGNATURE tablevar; 
		table_type: typevar;
		procedure init(var t: table_type);
		function first_key(t: table_type -> k: key_type); 
		function next_key(k, t: table_type -> rk: key_type); 
		function is_last_key(k, t: table_type -> b: boolean); 
		function get(t: table_type, k: key_type 
			-> v: value_type, b: boolean);
		procedure set(t: table_type, k: key_type, v: value_type); 
		...there should be an APPEND and a DELETE procedure.
	END; 

one would iterate over a table with code like: ::

	var t: si_table;
	begin ...
		si_table.init(t, k0);
		k := k0
		while not si_table.last(k) do 
			val, present := si_table.get(k)
			if present then
				do stuff with val.
				k := si_table.next(k)
			elif not present then 
				error	
			end;
		end;
	end;

strings in yevgeniya
--------------------

a string is just an array of byte, with a presumed 
encoding of utf-8.  the set of supported code points 
must at least include ascii + the unicode replacement 
character, but may include more.

how to iterate over a string, getting the unicode characters.::

	const MAX_CODE_POINT = 65533;
	type u8char_t = 0..MAX_CODE_POINT;
	var uc: u8char_t; 
	begin
		s := 'hello, world';
		i := 0;
		while i < len(s) do 
			uc, i := u8char(s, i);
			...use char value in uc...
		end
	end

The ORD intrinsic takes a utf8 byte array and returns the 
code point associated with the left-most unicode character 
in the array.  The CHR intrinsic takes an integer code point 
and returns a byte array (utf8) of the corresponding
unicode character.

simple i/o
----------

There are a number of statements built-in to the 
language to enable simple text i/o without the use 
of imported units. ::

	READ, READLN
	WRITE, WRITELN
	ASSIGN, OPEN, CLOSE, SEEK, TELL

units in general
----------------

A unit is implemented as a directory of files.  The contents of all 
the files are considered to be catentated together when the unit is 
compiled, with the contents being scanned twice (so that the contents
need not be written in any particular order).  Note that the unit directory
treats all .yev source files as belonging to the unit;
do not put
source files into a unit directory that are not part of the unit. 

A unit contains (in whatever order) - 

* zero or more USE statements.
* zero or more CONST sections.
* zero or more TYPE sections.
* zero or more PROCEDURE or FUNCTION definitions.

A unit will never contain a VAR section or an executable block.  All 
the entities defined in a unit are considered exported.  A programmer 
may define a naming convention for entities that should be considered
private to the unit, vs those that should be considered public.

the USE statement
-----------------

examples of the USE statement.

using a concrete system unit.

	USE MATH;		(* now we can reference math.sqrt() *)

using an abstract system unit.

	USE RAT;				(* concrete unit *)
	USE CMPLX_MATH(RAT) AS CMPLX_RAT;	(* abstract unit *)

using a local unit (a non-system unit provided either by a third-party
or by the programmer).

	USE "FOO.ORG/IMATH"; 	(* now IMATH unit is available *)

using a local abstract unit.

	USE "FOO.ORG/CMPLX";	(* now CMPLX unit is available *)
	USE "FOO.ORG/CMATH" (CMPLX) AS CMPLX_MATH; 

All of these USEs are non-versioned.  This means they do not
have specific requirements for the signatures of the USEd units.
For development or experimental cases, this is ok.  

As an idea to be tested (does versioning units help?) - we can specify
a version to the sprinkler.   The unit 'version' or meta-signature for a
unit, is just the hash of the signature of a unit (where this signature
is written out as a string of text, in a normalized form).  The hash
can be a non-cryptologic hash like Adler32 or CRC32, 
or a cryptologic hash like MD5, etc.

	USE MATH            : "adler32:062c0215"; 
	USE "FOO.ORG/RAT"   : "adler32:deadbeef";	
	USE "FOO.ORG/IMATH" : "crc32:0123abcd" (RAT) AS RAT_MATH; 

	USE MATH;	--system use
	USE MATH AS M;	--renaming system use
	USE MATH : "crc32:2345adea"; --versioned system use
	USE SORTER(IORDER) AS ISORTER;	--abstract use.
	USE SORTER : "vt:1.9.1" (IORDER) AS ISORTER;
		--versioned abstract use
	USE FOO(RED, GREEN) AS RGFOO;
		--multiple arg abstract use.
	USE "FOO.ORG/BAR";  --local use of bar
	USE "FOO.ORG/BAR" AS FOOBAR;  --renaming local use of bar
	USE "FOO.ORG/BAR" : "md5:e25d4e70ff2977161e0c46d34beeaf400"
		AS FOOBAR;
		--versioned renaming local use of bar

version identifiers have a tag followed by the textual
representation of a hash value (lowercased for hex digits a-f).
the tag values include: vt = version triple, a plain hash
function (e.g. one of adler32, crc32, fnv1/64, fnv1a/64),
or a cryptologic hash function (e.g. one of md5, sha1).

abstract units
--------------

An *abstract unit* is a unit that requires one or more concrete
unit parameters to be itself instantiated as a new concrete
unit.  These parameters are other concrete units, each of which
has a type or 'signature'.  An abstract unit is instantiated
into a *concrete unit* via a USE..AS statement, e.g.

	USE ABS_UNIT(SIG) AS CONC_UNIT;

(Normal units are concrete units.)

A *signature* is a kind of type - the type of a unit.
A signature type contains type signatures of named types,
constants, record types and procedures.

A unit is either concrete or abstract. The term 'unit' absent 
futher qualification is a concrete unit.

When one references an abstract unit in a USE statement, 
one provides the abstract unit with one or more concrete 
unit parameters, and creates a new concrete unit.
The concrete unit parameters must have signatures that conform 
with the signatures referenced in the body of the abstract unit.

--begin file iorder/main.yev

	unit iorder;

	(* concrete unit IORDER for integer comparison *)

	TYPE ALPHA = INTEGER;
	
	FUNCTION GT(A, B: ALPHA -> RV: BOOLEAN);
		BEGIN
			IF A < B THEN
				RV := TRUE
			ELIF A >= B THEN
				RV := FALSE
		END;

	PROCEDURE COPY(VAR A: ALPHA; B: ALPHA);
		BEGIN
			A := B
		END

--end file iorder/main.yev

--begin file sorter/main.yev

	(* abstract unit SORTER *)

	unit sorter(order: signature);

	TYPE ORDER = SIGNATURE
			TYPE ALPHA;
			FUNCTION GT(A, B: ALPHA -> RV: BOOLEAN);
			PROCEDURE COPY(VAR A: ALPHA; B: ALPHA)
		     END;

	(* the presence of a declaration that references a signature
           marks the current unit as abstract. *)

	PROCEDURE SORT(VAR A: ARRAY OF ORDER.ALPHA);
		VAR
			I, J : INTEGER;
			TMP  : ORDER.ALPHA;
	BEGIN
		FOR I := 0 TO LEN(A)-2 DO 
			FOR J := I+1 TO LEN(A)-1 DO 
				IF ORDER.GT(A[I], A[J]) THEN
					BEGIN
					ORDER.COPY(TMP, A[I]);
					ORDER.COPY(A[I], A[J]);
					ORDER.COPY(A[J], TMP)
					END
				ELIF NOT ORDER.GT(A[I], A[J]) THEN
					SKIP
	END (* SORT *)

--end file sorter/main.yev

and the client code that wants to use an integer sorter.

program green;
	use iorder;
	use sorter(iorder) as isorter;
	var 
		a: array 10 of integer
begin
	a := (3,1,4,1,5,9,2,6,5);
	isorter.sort(a);
	writeln(a)
end

const-ness and pointers
-----------------------

A constant pointer argument (one declared without VAR) cannot 
be modified in a procedure call, nor can it be modified in 
a yet-more-deeply nested procedure call.  For pointer 
arguments, this constraint applies to the pointer itself, 
not to fields of the pointer variable (should the pointer 
designate a record type, say).  So this is not allowed:

	PROCEDURE NEW_NODE(P: ^NODE); BEGIN NEW(P) END;

but the following is allowed:

	PROCEDURE INC(P: ^NODE); BEGIN P^.VALUE := P^.VALUE + 1 END;

(The "once const always const" constraint 
applies to all constant args in general.)

result parameters
-----------------

use result parameters (out-only parameters) for functions 
that return one or more results.

function inc(j: integer -> k: integer);
begin
	k := j + 1
end

function divmod(a, b: integer -> quo, rem: integer); 
begin
	quo := a div b; 
	rem := a mod b
end

for procedures, use var parameters for in-out parameters.

procedure halve(a: var array array integer);
	var i, j: integer;
begin
	for i in range(a, 1) do 
		for j in range(a, 2) do 
			a[i][j] := a[i][j] div 2
		end
	end
end

non-result non-var parameters are constant (in-only) parameters, 
and may not be changed in the procedure.

for-loops.

normal indexed for..to loop, iterating over an array.
	for i := 0 to len(a)-1 do .. end.
ranging over the first dimension of an array:
	FOR I := LBOUND(A, 1) TO UBOUND(A, 1) DO .. END
or just
	FOR I := LBOUND(A) TO UBOUND(A) DO .. END

syntax for R17 Subset 1, based on PL/0.

program = PROGRAM name ";" pblock.
pblock = c-part? v-part? pdecl-list? BEGIN statement-list END.
c-part = CONST name "=" literal (";" name "=" literal)*.
v-part = VAR vdecl (";" vdecl)*. 
vdecl = name-list ":" type.
name-list = name ("," name)*. 
type = INTEGER | BOOLEAN.
pdecl-list = pdecl (";" pdecl)*.
pdecl = pheader block.
pheader = PROCEDURE name "(" parm-list ")" result? ";"
parm-list = parm (";" parm)*.
parm = VAR? name-list ":" type.
result = RESULT "(" vdecl (";" vdecl)* ")". 
block = c-part? v-part? BEGIN statement-list END.

statement = assign | call | read | write | while | if.
assign = name-list ":=" expression.
call = name "(" expression-list ")". 
expression-list = expression ("," expression)*. 
read = READ name-list.
write = WRITE expression-list.
while = WHILE condition DO statement-list END.
statement-list = statement (";" statement-list)*. 
if = IF condition THEN statement-list 
	(ELIF condition THEN statement-list)+ END.

condition = expression (("="|"<>"|"<"|"<="|">"|">=") expression)? .
expression = term (("+"|"-"|OR) term)*. 
term = factor (("*"|DIV|AND) factor)*.
factor = name | literal | unop factor | "(" expression ")" | call.
literal = TRUE | FALSE | integer-literal.
unop = "-" | NOT.


Nondeterminism and the IF statement
-----------------------------------

In Yevgenia, the if-statement has several aspects which the Pascal
programmer will find unconventional.

1. There is no "ELSE" branch.
2. Every branch condition is tested when executing the if statement.
3. At least one branch must evaluate to true.  If no branches evaluate
   to true, the program halts with an error.
4. If more than one branch is true, a true branch is selected using 
   an implementation-dependent method and executed.  
5. If the order in which if-branches are tested changes the output 
   of the program, the program should be considered erroneous, even 
   though the compiler itself is not required to detect or report this.

For the first implementation of the language, compile-time
test order randomization will be done.

The case statement, similarly, lacks an else part, and requires
that one of the cases evaluate to true.  The case-statement
differs from the if-statement in that *exactly* one branch
must be true.

Consider the if-statement

	if   C1 then S1
	elif C2 then S2
	elif C3 then S3 end

Using compile-time 'test order randomization', this code might be 
evaluated as if it were written in a different order:

	if   C2 then S2
	elif C1 then S1
	elif C3 then S3 end

Assuming that the programmer uses regression tests, if a program 
fails following a recompile, this indicates an order dependency 
defect in an IF-statement.

The requirement for multiple tools in normal development
========================================================

Normal development of a unit requires running multiple tools.

* the interpreter (one or more runs) to collect access data
  on all constants and variables.
* the sprinkler (one run) to analyze the body of interpreter
  runs for for two kinds of problems: 
  + access problems :
    - uninitialized variable reads (read before write to a var)
    - dead writes (two writes to a var with no intervening read)
    - terminal writes (write to a var with no subsequent read)
    - dead variable (a variable is never written to)
  + coverage problems : the set of interpreter runs must include
    data showing each line being run at least once. nb, not every
    line need be executed in a single run, but across the set of runs
    each line must be run at least once. 
  if problems are found, they will be reported, and if no 
  problems are found, a "blessing" is issued (sprinkler is 
  short for "holy water sprinkler")
* the compiler (one run) takes a set of blessed units 
  and compiles it into either a library or an executable
  program.

The interpreter will have a mode in which the reads and writes
that happen on each lexical line of code in a file is recorded.

The information recorded needs to be enough to allow line
coverage to be worked out, and enough to follow a variable
in its home scope and all its subordinate scopes.  This
information should include: file md5, unit name, proc name,
temporal line number, physical line number, local var name,
true var name (unit/proc/localname), local "const-var-type",
true "const/var type", read/write marker.

The information the interpreter saves for the code in a
file is saved in the interpretation (or interpreter) record.
Probably I would save this information in an SQLite database.
The sprinkler will look at the interpretation record to look
for coverage and access problems.

When the sprinkler is given a file to check, it will require
a full set of interpreter records for that file (with the
same MD5 as the current file) to successfully bless the file.

I could use an Adler-32 checksum instead of an MD5.  The intent
of identifying a file by checksum or hash is not to prevent
mischief, but to make it possible for a programmer to get
a positive assurance that the access characteristics of the
file's variables and constants are what the compiler expects.
Having 100% line coverage is not an end in itself, but just
a way to get a strong approximation of each variable's full
access history.

The access history of a single run must conform to the all
variables "const-var-type".  Further, each single run must
(minimally) exit without error.  When the sprinkler analyzes
the collective history of all runs, this analysis must show
that every read-use and write-use of each variable has been
recorded in at least one run.  (we know we have every var
examined when we have 100% line coverage.)

The compiler will only compile blessed files.

If Yevgenia source files are shared, I would expect that the
shared artifacts would include not just the source files,
but also any scripts and input data required to reproduce
blessed units with the sprinker.

Making programming easier
-------------------------

A number of Yevgeniya's features (like the nondeterministic
IF statement, the total CASE statement, the whole deal 
of blessing via the sprinkler) on the face of it make 
programming harder.  It will be interesting to see if 
these features are a net plus or minus (and plus or minus
with respect to what ends).

consider - idea 8 

	source input:
		if c1 then s1
		elif c2 then s2
		elif c3 then s3

	if one were using run-time test randomization, 
	this will be translated to something like:
		b1 = c1; b2 = c2; b3 = c3
		true_branches = []
		if b1 then true_branches.append(1)	
		if b2 then true_branches.append(2)	
		if b3 then true_branches.append(3)
		if len true_branches = 0 
			error, nonexhaustive tests
		elif len true branches = 1
			b = true branch 0
			if b = 1 then s1
			elif b = 2 then s2
			elif b = 3 then s3.
		else
			--more than one true branch.
			ntrue = len true branches
			r = rand number mod ntrue 
			b = true_branches[r]
			if b = 1 then s1
			elif b = 2 then s2
			elif b = 3 then s3.
	if one were using compile-time test order randomization, 
	this would be translated to (say):
		if c2 then s2
		elif c1 then s1
		elif c3 then s3
		else error (non-exhaustive test)


grading logic example.
	if g > 90 then a
	elif g > 80 then b 
	elif g > 70 then c 
	elif g >= 60 then d 
	else f 
this would need to be written as
	if 0 <= g < 60 then f
	elif 60 <= g < 70 then d
	elif 70 <= g < 80 then c
	elif 80 <= g < 90 then b
	elif 90 <= g <= 100 then a
so that the branches would be order-independent and exhaustive.

------------

notes from chromebook. syntax has elements from pascal and oberon.

TLEs (top level entities) = program | unit | ?

program = PROGRAM name ; uses const? type? var? procs? block.

unit = UNIT name args? ; uses const? type? procs? .

stmt = assign | if | while | for | pass | break | continue 
assign = lhs := expr.
if = IF expr THEN stmt (ELIF expr THEN stmt)+.
while = WHILE expr DO stmt.
for = FOR lhs := expr TO expr (BY expr) DO stmt.
pass = PASS.
break = BREAK.
continue = CONTINUE.

how signatures might work.
	(* in abstract sorter unit file *)
	TYPE order = SIGNATURE
			TYPE alpha;
			FUNCTION gt(a,b: alpha -> r:boolean);
			PROCEDURE copy(a: alpha; var b: alpha);
			END;

UNIT sorter(o: order);
	procedure sort(var a: array of o.alpha) ...

 
[end of file]
